worker_processes auto;

events { 
    worker_connections 4096; 
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 0;
    proxy_read_timeout 3600;
    proxy_send_timeout 3600;

    upstream backend_auth {
        server backend:3000;
        keepalive 64;
    }

    upstream minio_private {
        server minio:9000;
        keepalive 64;
    }

    log_format media_json escape=json
        '{ "time":"$time_iso8601", "remote":"$remote_addr", "method":"$request_method",'
        ' "uri":"$request_uri", "status":$status,'
        ' "bytes":$body_bytes_sent, "range":"$http_range",'
        ' "upstream_status":"$upstream_status",'
        ' "req_time":$request_time, "up_time":"$upstream_response_time",'
        ' "user_agent":"$http_user_agent" }';

    access_log /var/log/nginx/media_access.log media_json;
    error_log /var/log/nginx/media_error.log warn;

    map $http_origin $cors_allow_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" $http_origin;
        "~^https://example\.com$" $http_origin;
    }

    server {
        listen 80;
        server_name media.example.com localhost;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        http2 on;
        server_name media.example.com localhost;

        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Auth subrequest endpoint - only validates JWT
        location = /authz {
            internal;
            proxy_pass http://backend_auth/authz/media;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Host $host;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Direct streaming from MinIO with JWT auth
        location /v1/audio/ {
            # CORS headers
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            add_header Vary Origin always;
            add_header Access-Control-Expose-Headers "accept-ranges, content-range, etag, last-modified, content-length" always;

            # Handle CORS preflight
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $cors_allow_origin always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Range, If-Range, Content-Type" always;
                add_header Access-Control-Max-Age 3600 always;
                return 204;
            }

            # Authenticate request
            auth_request /authz;

            # If auth fails, send JSON 403
            error_page 401 403 = @auth_error;

            # Extract the file path and proxy directly to MinIO
            rewrite ^/v1/audio/(.*)$ /tasama-recordings/$1 break;
            
            # Direct proxy to MinIO
            proxy_pass http://minio_private;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Pass through range requests for streaming
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
            proxy_set_header Host $http_host;
            proxy_set_header Connection "";
            
            # Hide MinIO-specific headers
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            proxy_hide_header x-amz-server-side-encryption;
            proxy_hide_header x-amz-delete-marker;
            proxy_hide_header x-amz-version-id;
            
            # Security headers
            add_header X-Content-Type-Options nosniff always;
            add_header Referrer-Policy no-referrer-when-downgrade always;
            
            # Enable range requests
            proxy_http_version 1.1;
            proxy_set_header Accept-Encoding "";
        }

        # Auth error handler
        location @auth_error {
            default_type application/json;
            add_header Content-Type application/json always;
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            return 403 '{"error":"forbidden","message":"Access denied"}';
        }

        # Backend API endpoints (login, upload, list)
        location /auth/ {
            proxy_pass http://backend_auth;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
        }

        location /media/ {
            proxy_pass http://backend_auth;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}