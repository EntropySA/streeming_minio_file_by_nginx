# Auth subrequest endpoint - only validates JWT
location = /authz {
    internal;
    proxy_pass http://backend_auth/authz/media;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header Host $host;
    proxy_set_header Authorization $http_authorization;
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-Method $request_method;
    proxy_set_header X-Forwarded-For $remote_addr;
}

# Direct streaming from MinIO with JWT auth
location /v1/audio/ {
    # CORS headers for all responses
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Range, If-Range, Content-Type, Accept" always;
    add_header Access-Control-Expose-Headers "accept-ranges, content-range, content-length, content-type, etag, last-modified" always;
    add_header Access-Control-Max-Age 3600 always;
    add_header Vary Origin always;

    # Handle CORS preflight
    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Range, If-Range, Content-Type, Accept" always;
        add_header Access-Control-Max-Age 3600 always;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    # Authenticate request
    auth_request /authz;
    auth_request_set $auth_status $upstream_status;
    error_page 401 403 = @auth_error;

    # Rewrite and proxy to MinIO
    rewrite ^/v1/audio/(.*)$ /recordings/$1 break;
    proxy_pass http://minio_private;
    
    # CRITICAL: Disable buffering for streaming
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;

    # Enable range requests (streaming)
    proxy_set_header Range $http_range;
    proxy_set_header If-Range $http_if_range;
    proxy_set_header Host $http_host;
    proxy_set_header Connection "";

    # Pass through range response headers
    proxy_pass_header Accept-Ranges;
    proxy_pass_header Content-Range;
    proxy_pass_header Content-Length;

    # Hide MinIO-specific headers
    proxy_hide_header x-amz-id-2;
    proxy_hide_header x-amz-request-id;
    proxy_hide_header x-amz-server-side-encryption;
    proxy_hide_header x-amz-delete-marker;
    proxy_hide_header x-amz-version-id;
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy no-referrer-when-downgrade always;

    # HTTP/1.1 for proper streaming support
    proxy_http_version 1.1;
    proxy_set_header Accept-Encoding "";
    
    # Increase timeouts for long streams
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
}

# Auth error handler
location @auth_error {
    default_type application/json;
    add_header Content-Type application/json always;
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Range, If-Range, Content-Type, Accept" always;
    return 403 '{"error":"forbidden","message":"Access denied - invalid or expired token"}';
}

# Backend API endpoints (login, upload, list)
location /auth/ {
    # CORS headers
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    add_header Access-Control-Max-Age 3600 always;

    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
        add_header Access-Control-Max-Age 3600 always;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    proxy_pass http://backend_auth;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

location /media/ {
    # CORS headers
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    add_header Access-Control-Max-Age 3600 always;

    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
        add_header Access-Control-Max-Age 3600 always;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    proxy_pass http://backend_auth;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

location /authz/ {
    # CORS headers
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    add_header Access-Control-Max-Age 3600 always;

    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
        add_header Access-Control-Max-Age 3600 always;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    proxy_pass http://backend_auth;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# Health check
location /health {
    access_log off;
    add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Content-Type text/plain;
    return 200 "OK\n";
}